#include "main/NodePlayerControl.hh"

#include <boost/uuid/string_generator.hpp>
#include <boost/uuid/uuid_io.hpp>
#include <gtest/gtest.h>

#include <optional>
#include <string>

namespace {
using namespace std::string_literals;
const auto NODE = "node"s;
const auto OTHER_NODE = "other"s;
boost::uuids::string_generator STRING_GENERATOR;
}

class NodePlayerControlTest : public testing::Test
{
protected:
    std::optional<boost::uuids::uuid> uuid {
        STRING_GENERATOR("a3cc5805-544f-415b-ba86-31f6237bf122")};
    std::optional<boost::uuids::uuid> otherUuid {
        STRING_GENERATOR("5913e360-0a82-44fe-8406-e486b3a9f8bb")};
    Bridge::Main::NodePlayerControl nodePlayerControl;
};

TEST_F(NodePlayerControlTest, testCreatePlayer)
{
    const auto player = nodePlayerControl.createPlayer(NODE, uuid);
    ASSERT_TRUE(player);
    EXPECT_EQ(uuid, player->getUuid());
}

TEST_F(NodePlayerControlTest, testCreatePlayerWithSameUuid)
{
    nodePlayerControl.createPlayer(NODE, uuid);
    EXPECT_FALSE(nodePlayerControl.createPlayer(NODE, uuid));
}

TEST_F(NodePlayerControlTest, testCreatePlayerWithDifferentUuid)
{
    nodePlayerControl.createPlayer(NODE, uuid);
    EXPECT_TRUE(nodePlayerControl.createPlayer(NODE, otherUuid));
}

TEST_F(NodePlayerControlTest, testGetPlayerForCorrectNode)
{
    const auto player = nodePlayerControl.createPlayer(NODE, uuid);
    nodePlayerControl.createPlayer(OTHER_NODE, otherUuid);
    EXPECT_EQ(player, nodePlayerControl.getPlayer(NODE, uuid));
}

TEST_F(NodePlayerControlTest, testGetUnknownPlayer)
{
    EXPECT_FALSE(nodePlayerControl.getPlayer(NODE, uuid));
}

TEST_F(NodePlayerControlTest, testGetPlayerForIncorrectNode)
{
    const auto player = nodePlayerControl.createPlayer(NODE, uuid);
    nodePlayerControl.createPlayer(NODE, otherUuid);
    EXPECT_FALSE(nodePlayerControl.getPlayer(OTHER_NODE, uuid));
}

TEST_F(NodePlayerControlTest, testGetUniquePlayerForNode)
{
    const auto player = nodePlayerControl.createPlayer(NODE, uuid);
    EXPECT_EQ(player, nodePlayerControl.getPlayer(NODE));
}

TEST_F(NodePlayerControlTest, testGetUniquePlayerFail)
{
    nodePlayerControl.createPlayer(NODE, uuid);
    nodePlayerControl.createPlayer(NODE, otherUuid);
    uuid = std::nullopt;
    EXPECT_FALSE(nodePlayerControl.getPlayer(NODE, uuid));
    EXPECT_FALSE(uuid);
}

TEST_F(NodePlayerControlTest, testPlayerWithAutogeneratedUuid)
{
    const auto player = nodePlayerControl.createPlayer(NODE, std::nullopt);
    ASSERT_TRUE(player);
    EXPECT_EQ(player, nodePlayerControl.getPlayer(NODE, player->getUuid()));
}
