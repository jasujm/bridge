/** \file
 *
 * \brief Definition of Bridge::Vulnerability enum and related utilities
 */

#ifndef VULNERABILITY_HH_
#define VULNERABILITY_HH_

#include <boost/operators.hpp>

namespace Bridge {

enum class Partnership;

/** \brief Bridge vulnerability status
 *
 * This structs stores for given deal the information which partnerships are
 * vulnerable.
 *
 * Vulnerability objects are equality comparable. Two objects compare equal
 * when vulnerability statuses for both partnerships compare equal.
 *
 * \note Boost operators library is used to ensure that operator!= is
 * generated with usual semantics when operator== is supplied.
 */
struct Vulnerability : private boost::equality_comparable<Vulnerability> {

    /** \brief Is the north–south partnership vulnerable?
     */
    bool northSouthVulnerable;

    /** \brief Is the east–west partnership vulnerable?
     */
    bool eastWestVulnerable;

    /** \brief Create new vulnerability status
     *
     * \param northSouthVulnerable Is the north–south partnership vulnerable?
     * \param eastWestVulnerable Is the east–west partnership vulnerable?
     */
    constexpr Vulnerability(
        bool northSouthVulnerable, bool eastWestVulnerable) :
        northSouthVulnerable {northSouthVulnerable},
        eastWestVulnerable {eastWestVulnerable}
    {
    }
};

/** \brief Determine if the given partnership is vulnerable
 *
 * \param vulnerability the vulnerabilities of the deal
 * \param partnership the partnership
 *
 * \return true if given partnership is vulnerable, false otherwise
 */
bool isVulnerable(
    const Vulnerability& vulnerability, Partnership partnership);

/** \brief Equality operator for Vulnerability objects
 */
bool operator==(const Vulnerability&, const Vulnerability&);

}

#endif // VULNERABILITY_HH_
